# This is a basic workflow to help you get started with Actions

name: Build Image and Push to ECR

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" & "dev" branchs
  push:
    branches: [ "main", "dev" ]
    tags:
      - "*"
  # pull_request:
  #   branches: [ "master", "dev" ]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      ECR_REPOSITORY_ALICE: alice_lg
      ECR_REPOSITORY_GOBGP: gobgp

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out code
        uses: actions/checkout@v3

      - name: Load .env
        id: dotenv
        uses: falti/dotenv-action@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker meta - Alice
        id: metajob_alice
        uses: docker/metadata-action@v3
        env:
          ALICE_IMAGE_NAME: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_ALICE }}
        with:
          images: ${{ env.ALICE_IMAGE_NAME }}
          tags: |
            type=sha,prefix=${{ steps.dotenv.outputs.ALICE_VERSION }}-
            type=raw,value=${{ steps.dotenv.outputs.ALICE_VERSION }}

      - name: build container - Alice
        uses: docker/build-push-action@v2
        env:
          ALICE_IMAGE_NAME: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_ALICE }}
        with:
          context: .
          file: alice.Dockerfile
          # target: runtime
          # platforms: linux/amd64,linux/arm/v7
          push: true
          build-args: |
            BUILD_VERSION=${{ steps.dotenv.outputs.ALICE_VERSION }}
            ARCHIVE_URL=${{ steps.dotenv.outputs.ALICE_ARCHIVE_URL }}
          tags: |
            ${{ steps.metajob_alice.outputs.tags }}
            ${{ env.ALICE_IMAGE_NAME }}:latest
          # ${{ ALICE_IMAGE_NAME }}:${{ ALICE_VERSION }}
          labels: ${{ steps.metajob_alice.outputs.labels }}

      - name: Docker meta - GoBGP
        id: metajob_gobgp
        uses: docker/metadata-action@v3
        env:
          GOBGP_IMAGE_NAME: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_GOBGP }}
        with:
          images: ${{ env.GOBGP_IMAGE_NAME }}
          tags: |
            type=sha,prefix=${{ steps.dotenv.outputs.GOBGP_VERSION }}-
            type=raw,value=${{ steps.dotenv.outputs.GOBGP_VERSION }}

      - name: build container - GoBGP
        uses: docker/build-push-action@v5
        env:
          GOBGP_IMAGE_NAME: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_GOBGP }}
        with:
          context: .
          file: gobgp.Dockerfile
          # target: runtime
          # platforms: linux/amd64,linux/arm/v7
          push: true
          build-args: |
            BUILD_VERSION=${{ steps.dotenv.outputs.GOBGP_VERSION }}
            ARCHIVE_URL=${{ steps.dotenv.outputs.GOBGP_ARCHIVE_URL }}
          tags: |
            ${{ steps.metajob_gobgp.outputs.tags }}
            ${{ env.GOBGP_IMAGE_NAME }}:latest
          # ${{ GOBGP_IMAGE_NAME }}:${{ GOBGP_VERSION }}
          labels: ${{ steps.metajob_gobgp.outputs.labels }}
